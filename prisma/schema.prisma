// ------------------------------
// Generator & Datasource
// -----------------------------s-
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

/**
 * MODELS
 * This schema defines the data model for a civil registry/document management system.
 * In order to preserve historical data, many relations have been set to onDelete: SetNull
 * (and the FK fields made optional) so that if a parent record (for example, a User or a Form)
 * is deleted the related record remains with a backup copy (for example, the name).
 */

// ------------------------------
// Role
// ------------------------------
model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @unique
  description String?
  permissions RolePermission[] @relation("RoleToPermission")
  users       UserRole[]       @relation("RoleToUser")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("role")
}

// ------------------------------
// RolePermission
// ------------------------------
model RolePermission {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId     String?    @db.Uuid
  roleName   String
  permission Permission
  createdAt  DateTime   @default(now())
  role       Role?      @relation("RoleToPermission", fields: [roleId], references: [id], onDelete: SetNull)

  @@unique([roleId, permission])
  @@map("role_permission")
}

// ------------------------------
// UserRole
// ------------------------------
model UserRole {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  roleId    String?  @db.Uuid
  userName  String?
  roleName  String?
  createdAt DateTime @default(now())

  // Specify unique foreign key names using the `map` argument.
  user User? @relation("UserToRole", fields: [userId], references: [id], onDelete: SetNull, map: "fk_userrole_user")
  role Role? @relation("RoleToUser", fields: [roleId], references: [id], onDelete: SetNull, map: "fk_userrole_role")

  @@unique([userId, roleId], map: "uk_userrole_user_role")
  @@map("user_role")
}

// ------------------------------
// User
// ------------------------------
model User {
  id                         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                      String                  @unique
  name                       String
  emailVerified              Boolean
  image                      String?
  username                   String?                 @unique
  active                     Boolean                 @default(true)
  roles                      UserRole[]              @relation("UserToRole")
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  lastLoginAt                DateTime?
  language                   String?                 @default("en")
  accounts                   Account[]
  attachments                Attachment[]
  auditLogs                  AuditLog[]
  preparedForms              BaseRegistryForm[]      @relation("PreparedBy")
  verifiedForms              BaseRegistryForm[]      @relation("VerifiedBy")
  receivedForms              BaseRegistryForm[]      @relation("ReceivedBy")
  registeredForms            BaseRegistryForm[]      @relation("RegisteredBy")
  feedback                   Feedback[]
  notifications              Notification[]
  profile                    Profile?
  queues                     Queue[]
  sessions                   Session[]
  workflows                  Workflow[]
  eSignature                 String?                 @db.Text
  preparedCivilRegistryForms CivilRegistryFormBase[] @relation("PreparedCivilRegistryForms")
  verifiedCivilRegistryForms CivilRegistryFormBase[] @relation("VerifiedCivilRegistryForms")

  @@map("user")
}

// ------------------------------
// BaseRegistryForm
// ------------------------------
model BaseRegistryForm {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formNumber         String   @db.VarChar(3)
  formType           FormType
  registryNumber     String   @unique
  dateOfRegistration DateTime

  // Location details
  province         String
  cityMunicipality String

  // Pagination
  pageNumber String
  bookNumber String

  // Prepared by
  preparedById       String?   @db.Uuid
  preparedBy         User?     @relation("PreparedBy", fields: [preparedById], references: [id], onDelete: SetNull)
  preparedByName     String?
  preparedByPosition String?
  preparedByDate     DateTime?

  // Verified by
  verifiedById   String?   @db.Uuid
  verifiedBy     User?     @relation("VerifiedBy", fields: [verifiedById], references: [id], onDelete: SetNull)
  verifiedByName String?
  verifiedByDate DateTime?

  // Received by
  receivedById       String?   @db.Uuid
  receivedByUser     User?     @relation("ReceivedBy", fields: [receivedById], references: [id], onDelete: SetNull)
  receivedBy         String?
  receivedByPosition String?
  receivedByDate     DateTime?

  // Registered by
  registeredById       String?   @db.Uuid
  registeredByUser     User?     @relation("RegisteredBy", fields: [registeredById], references: [id], onDelete: SetNull)
  registeredBy         String?
  registeredByPosition String?
  registeredByDate     DateTime?

  // Other fields
  isLateRegistered Boolean?
  remarks          String?
  lcroNotations    String?

  // Status and timestamps
  status    DocumentStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Related forms
  birthCertificateForm    BirthCertificateForm?
  deathCertificateForm    DeathCertificateForm?
  marriageCertificateForm MarriageCertificateForm?

  // Related documents
  documents BaseRegistryFormDocument[]

  @@index([registryNumber])
  @@index([formNumber])
  @@index([dateOfRegistration])
  @@map("base_registry_form")
}

model BaseRegistryFormDocument {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseRegistryFormId String           @db.Uuid
  documentId         String           @db.Uuid
  baseRegistryForm   BaseRegistryForm @relation(fields: [baseRegistryFormId], references: [id])
  document           Document         @relation(fields: [documentId], references: [id])

  @@map("base_registry_form_document")
}

// ------------------------------
// MarriageCertificateForm (Form 97)
// ------------------------------
model MarriageCertificateForm {
  id                          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                  String?           @unique @db.Uuid
  husbandFirstName            String
  husbandMiddleName           String?
  husbandLastName             String
  husbandDateOfBirth          DateTime
  husbandAge                  Int
  husbandPlaceOfBirth         Json
  husbandSex                  Sex?
  husbandCitizenship          String
  husbandResidence            String
  husbandReligion             String?
  husbandCivilStatus          String
  husbandFatherName           Json
  husbandFatherCitizenship    String
  husbandMotherMaidenName     Json
  husbandMotherCitizenship    String
  husbandConsentPerson        Json?
  husbandContractParty        Json

  wifeFirstName               String
  wifeMiddleName              String?
  wifeLastName                String
  wifeDateOfBirth             DateTime
  wifeAge                     Int
  wifePlaceOfBirth            Json
  wifeSex                     Sex?
  wifeCitizenship             String
  wifeResidence               String
  wifeReligion                String?
  wifeCivilStatus             String
  wifeFatherName              Json
  wifeFatherCitizenship       String
  wifeMotherMaidenName        Json
  wifeMotherCitizenship       String
  wifeConsentPerson           Json?
  wifeContractParty           Json


  remarks                     String?

  placeOfMarriage             Json
  dateOfMarriage              DateTime
  timeOfMarriage              DateTime            
  contractDay                 DateTime

  marriageSettlement          Boolean           @default(false)
  contractingPartiesSignature Json[]
  marriageLicenseDetails      Json?
  marriageArticle             Json?           
  executiveOrderApplied       Boolean           @default(false)
  solemnizingOfficer          Json
  witnesses                   Json[]

  registeredByOffice          Json?
  receivedByOffice            Json?
  preparedByOffice            Json?

  affidavitOfSolemnizingOfficer Json?
  affidavitOfdelayedRegistration Json?
  baseForm                    BaseRegistryForm? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([husbandLastName, husbandFirstName])
  @@index([wifeLastName, wifeFirstName])
  @@index([dateOfMarriage])
  @@map("marriage_certificate_form")
}

// ------------------------------
// BirthCertificateForm (Form 102)
// ------------------------------
model BirthCertificateForm {
  id                             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                     String?           @unique @db.Uuid
  childName                      Json
  sex                            Sex
  dateOfBirth                    DateTime
  placeOfBirth                   Json
  typeOfBirth                    String
  multipleBirthOrder             String?
  birthOrder                     String?
  weightAtBirth                  Float
  motherMaidenName               Json
  motherCitizenship              String
  motherReligion                 String?
  motherOccupation               String?
  motherAge                      Int
  motherResidence                Json
  totalChildrenBornAlive         Int?
  childrenStillLiving            Int?
  childrenNowDead                Int?
  fatherName                     Json
  fatherCitizenship              String
  fatherReligion                 String?
  fatherOccupation               String?
  fatherAge                      Int
  fatherResidence                Json
  parentMarriage                 Json?
  attendant                      Json
  informant                      Json
  preparer                       Json
  hasAffidavitOfPaternity        Boolean           @default(false)
  affidavitOfPaternityDetails    Json?
  affidavitOfDelayedRegistration Json?
  isDelayedRegistration          Boolean           @default(false)
  reasonForDelay                 String?
  baseForm                       BaseRegistryForm? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([dateOfBirth])
  @@map("birth_certificate_form")
}

// ------------------------------ 
// DeathCertificateForm (Form 103) 
// ------------------------------ 
model DeathCertificateForm {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId String? @unique @db.Uuid

  // Deceased Information
  deceasedName Json // nameSchema structure (first, middle, last)
  sex          Sex // Enum: Male, Female
  dateOfDeath  DateTime
  timeOfDeath  DateTime
  dateOfBirth  DateTime
  ageAtDeath   Json // Object with years, months, days, hours
  placeOfDeath Json // residenceSchema structure
  civilStatus  String
  religion     String?
  citizenship  String
  residence    Json // residenceSchema structure
  occupation   String

  // Parents Information
  parentInfo Json // Contains fatherName and motherName as nameSchema

  // Birth Information
  birthInformation Json? // Contains ageOfMother, methodOfDelivery, lengthOfPregnancy, typeOfBirth, birthOrder

  // Medical Certificate
  medicalCertificate Json // Contains causesOfDeath, maternalCondition, externalCauses, attendant, autopsy

  // Causes of Death sections
  causesOfDeath19b Json // Standard cause of death (immediate, antecedent, underlying, otherSignificantConditions)

  // Certification of Death
  certificationOfDeath Json // Contains hasAttended, signature, nameInPrint, titleOfPosition, address, date, healthOfficerSignature, healthOfficerNameInPrint

  // Review Information
  reviewedBy Json // Contains signature and date

  // Optional Certificates
  postmortemCertificate Json? // For autopsy cases
  embalmerCertification Json? // For embalming cases
  delayedRegistration   Json? // For late registrations

  // Disposal Information
  corpseDisposal      String
  burialPermit        Json // Contains number and dateIssued
  transferPermit      Json? // Optional, contains number and dateIssued
  cemeteryOrCrematory Json // Contains name and address (residenceSchema)

  // Informant Information
  informant Json // Contains signature, nameInPrint, relationshipToDeceased, address, date

  // Additional Fields
  remarks String? // Additional remarks or annotations

  // Relationships
  baseForm BaseRegistryForm? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([dateOfDeath])
  @@map("death_certificate_form")
}

// ------------------------------
// CertifiedCopy
// ------------------------------
model CertifiedCopy {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formId              String?                @db.Uuid
  status              CertifiedCopyStatus    @default(PENDING)
  lcrNo               String?
  bookNo              String?
  pageNo              String?
  searchedBy          String?
  contactNo           String?
  date                DateTime?
  attachmentId        String?                @db.Uuid
  address             String
  amountPaid          Float?
  createdAt           DateTime               @default(now())
  datePaid            DateTime?
  isRegistered        Boolean                @default(false)
  orNumber            String?
  purpose             String
  registeredDate      DateTime?
  relationshipToOwner String
  remarks             String?
  requesterName       String
  signature           String?
  updatedAt           DateTime               @updatedAt
  form                CivilRegistryFormBase? @relation(fields: [formId], references: [id], onDelete: SetNull)
  attachment          Attachment?            @relation(fields: [attachmentId], references: [id], onDelete: SetNull)

  @@map("certified_copy")
}

// ------------------------------
// Session
// ------------------------------
model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  // Make userId optional so that if a User is removed the session remains (with only the token metadata).
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("session")
}

// ------------------------------
// Account
// ------------------------------
model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountId             String
  providerId            String
  // Make userId optional so that if a User is removed the account record remains.
  userId                String?   @db.Uuid
  password              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("account")
}

// ------------------------------
// Verification
// ------------------------------
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// ------------------------------
// Queue
// ------------------------------
model Queue {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketNumber    Int         @unique @default(autoincrement())
  kioskNumber     Int?
  status          QueueStatus @default(WAITING)
  serviceType     ServiceType
  userId          String?     @db.Uuid
  email           String?
  documents       String[]
  processingNotes String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  userName        String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("queue")
}

// ------------------------------
// Profile
// ------------------------------
model Profile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // Make userId optional so that the profile remains even if the User is deleted.
  userId      String?   @unique @db.Uuid
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  bio         String?
  occupation  String?
  gender      String?
  nationality String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("profile")
}

model Document {
  id                 String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               AttachmentType
  title              String
  description        String?
  metadata           Json?
  status             DocumentStatus             @default(PENDING)
  version            Int                        @default(1)
  isLatest           Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  attachments        Attachment[]
  auditLogs          AuditLog[]
  workflowSteps      WorkflowStep[]
  civilRegistryForms CivilRegistryFormBase[]
  baseRegistryForms  BaseRegistryFormDocument[]

  @@map("document")
}

// ------------------------------
// Attachment
// ------------------------------
model Attachment {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?         @db.Uuid
  documentId      String?         @db.Uuid
  type            AttachmentType
  fileUrl         String
  fileName        String
  fileSize        Int
  mimeType        String
  status          DocumentStatus  @default(PENDING)
  uploadedAt      DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  verifiedAt      DateTime?
  notes           String?
  metadata        Json?
  hash            String?
  document        Document?       @relation(fields: [documentId], references: [id], onDelete: SetNull)
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  certifiedCopies CertifiedCopy[]

  @@map("attachment")
}

// ------------------------------
// Workflow
// ------------------------------
model Workflow {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String?        @db.Uuid
  createdByName String
  user          User?          @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  steps         WorkflowStep[]

  @@map("workflow")
}

// ------------------------------
// WorkflowStep
// ------------------------------
model WorkflowStep {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // Make both workflowId and documentId optional.
  workflowId String?   @db.Uuid
  documentId String?   @db.Uuid
  name       String
  order      Int
  isRequired Boolean   @default(true)
  deadline   DateTime?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  workflow   Workflow? @relation(fields: [workflowId], references: [id], onDelete: SetNull)

  @@map("workflow_step")
}

// ------------------------------
// Notification
// ------------------------------
model Notification {
  id        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?              @db.Uuid
  userName  String?              @default("Anonymous")
  type      NotificationType
  title     String
  message   String
  read      Boolean              @default(false)
  createdAt DateTime             @default(now())
  readAt    DateTime?
  status    NotificationStatus[] @default([])
  user      User?                @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("notification")
}

// ------------------------------
// AuditLog
// ------------------------------
model AuditLog {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // If the user is deleted, keep the log with the backup “userName.”
  userId              String?                @db.Uuid
  userName            String
  action              String
  entityType          String
  // Instead of a generic “entityId” field we now use specific backup relations.
  documentId          String?                @db.Uuid
  civilRegistryFormId String?                @db.Uuid
  details             Json?
  ipAddress           String?
  userAgent           String?
  createdAt           DateTime               @default(now())
  document            Document?              @relation(fields: [documentId], references: [id], onDelete: SetNull)
  civilRegistryForm   CivilRegistryFormBase? @relation(fields: [civilRegistryFormId], references: [id], onDelete: SetNull)
  user                User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_log")
}

// ------------------------------
// Feedback
// ------------------------------
model Feedback {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedback      String
  submittedBy   String?  @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  submitterName String?
  user          User?    @relation(fields: [submittedBy], references: [id], onDelete: SetNull)

  @@map("feedback")
}

// ------------------------------
// CivilRegistryFormBase
// ------------------------------
model CivilRegistryFormBase {
  id                     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formType               CivilRegistryFormType
  pageNumber             String?
  bookNumber             String?
  registryNumber         String?
  issuedTo               String?
  purpose                String
  remarks                String?
  isRegisteredLate       Boolean               @default(false)
  dateOfRegistration     DateTime?
  copies                 Int?                  @default(0)
  preparedByName         String?
  preparedByPosition     String?
  verifiedByName         String?
  verifiedByPosition     String?
  civilRegistrar         String?
  civilRegistrarPosition String?
  amountPaid             Float?
  orNumber               String?
  datePaid               DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  birthForm              CivilRegistryForm1A?
  deathForm              CivilRegistryForm2A?
  marriageForm           CivilRegistryForm3A?
  preparedByUserId       String?               @db.Uuid
  verifiedByUserId       String?               @db.Uuid
  preparedByUserName     String?
  verifiedByUserName     String?
  preparedByUser         User?                 @relation("PreparedCivilRegistryForms", fields: [preparedByUserId], references: [id], onDelete: SetNull)
  verifiedByUser         User?                 @relation("VerifiedCivilRegistryForms", fields: [verifiedByUserId], references: [id], onDelete: SetNull)
  documentId             String?               @db.Uuid
  document               Document?             @relation(fields: [documentId], references: [id], onDelete: SetNull)
  auditLogs              AuditLog[]
  CertifiedCopy          CertifiedCopy[]

  @@index([registryNumber])
  @@index([bookNumber, pageNumber])
  @@map("civil_registry_form_base")
}

// ------------------------------
// CivilRegistryForm1A (Birth)
// ------------------------------
model CivilRegistryForm1A {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId           String?                @unique @db.Uuid
  nameOfChild          String
  sex                  Sex?
  dateOfBirth          DateTime
  placeOfBirth         String
  nameOfMother         String
  citizenshipMother    String?
  nameOfFather         String
  citizenshipFather    String?
  dateMarriageParents  DateTime?
  placeMarriageParents String?
  baseForm             CivilRegistryFormBase? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([nameOfChild])
  @@map("civil_registry_form_1a")
}

// ------------------------------
// CivilRegistryForm2A (Death)
// ------------------------------
model CivilRegistryForm2A {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId     String?                @unique @db.Uuid
  nameOfDeceased String
  sex            Sex?
  age            Int?
  civilStatus    String?
  citizenship    String?
  dateOfDeath    DateTime
  placeOfDeath   String
  causeOfDeath   String?
  baseForm       CivilRegistryFormBase? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([nameOfDeceased])
  @@map("civil_registry_form_2a")
}

// ------------------------------
// CivilRegistryForm3A (Marriage)
// ------------------------------
model CivilRegistryForm3A {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId String? @unique @db.Uuid

  husbandName           String
  husbandDateOfBirthAge String?
  husbandCitizenship    String?
  husbandCivilStatus    String?
  husbandMother         String?
  husbandFather         String?

  wifeName           String
  wifeDateOfBirthAge String?
  wifeCitizenship    String?
  wifeCivilStatus    String?
  wifeMother         String?
  wifeFather         String?

  dateOfMarriage  DateTime
  placeOfMarriage String

  baseForm CivilRegistryFormBase? @relation(fields: [baseFormId], references: [id], onDelete: SetNull)

  @@index([husbandName, wifeName])
  @@map("civil_registry_form_3a")
}

/**
 * ENUMS
 * Below are all the enums used in the models.
 */

enum Permission {
  // User Management
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  USER_ACTIVATE
  USER_DEACTIVATE
  USER_EXPORT

  // Role Management
  ROLE_CREATE
  ROLE_READ
  ROLE_UPDATE
  ROLE_DELETE
  ROLE_ASSIGN
  ROLE_EXPORT

  // Document Management
  DOCUMENT_CREATE
  DOCUMENT_READ
  DOCUMENT_UPDATE
  DOCUMENT_DELETE
  DOCUMENT_VERIFY
  DOCUMENT_EXPORT

  // Report Management
  REPORT_CREATE
  REPORT_READ
  REPORT_EXPORT

  // System Settings
  SYSTEM_SETTINGS_READ

  // Audit Logs
  AUDIT_LOG_READ

  // Notifications
  FEEDBACK_DELETE
  FEEDBACK_READ
  FEEDBACK_EXPORT
}

enum AttendantType {
  Physician
  Nurse
  Midwife
  Hilot
  Others
}

enum CauseOfDeathType {
  IMMEDIATE
  ANTECEDENT
  UNDERLYING
  OTHER_SIGNIFICANT
}

enum MannerOfDeath {
  NATURAL
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}

enum CertifiedCopyStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum FormType {
  MARRIAGE
  BIRTH
  DEATH
}

enum QueueStatus {
  WAITING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ServiceType {
  TRUE_COPY
  VERIFY
  CERTIFICATION
  AUTHENTICATION
}

enum DocumentStatus {
  PENDING
  VERIFIED
  LATE_REGISTRATION
  READY_FOR_RELEASE
  RELEASED
}

enum NotificationType {
  SYSTEM
}

enum AttachmentType {
  BIRTH_CERTIFICATE
  DEATH_CERTIFICATE
  MARRIAGE_CERTIFICATE
  CERTIFIED_TRUE_COPY_REQUEST
}

enum CivilRegistryFormType {
  FORM_1A
  FORM_2A
  FORM_3A
}

enum NotificationStatus {
  favorite
  archive
}

enum Sex {
  Male
  Female
}

// pnpm prisma db push --force-reset
// pnpm prisma generate                       # for generate the Prisma Client with new models
// pnpm prisma migrate dev --name NAME_HERE   # for ceate and run the migration
// pnpm prisma db seed                        # for seeding our seed and seed-data
